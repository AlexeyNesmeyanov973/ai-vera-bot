# app/bot.py
import logging
import asyncio
import os
import sys
import uuid
from math import ceil

from telegram import (
    Update,
    InputFile,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
from telegram.error import Conflict  # ¬´–º—è–≥–∫–∞—è –∑–∞—â–∏—Ç–∞¬ª –æ–¥–Ω–æ–≥–æ polling

from app.config import (
    TELEGRAM_BOT_TOKEN,
    WHISPER_BACKEND,
    WHISPER_MODEL,
    ADMIN_USER_IDS,
    OVERAGE_PRICE_RUB,
    MAX_FILE_SIZE_MB,
    URL_MAX_FILE_SIZE_MB,
)
from app import storage
from app.utils import format_seconds
from app.task_queue import task_queue
from app.task_manager import task_manager
from app.bootstrap import run_startup_migrations
from app.payments_bootstrap import payment_manager
from app.pdf_generator import pdf_generator
from app.translator import translate_text
from app.analytics import analyze_text, build_report_md




# –ü—Ä–∏–≥–ª—É—à–∏–º —à—É–º –æ—Ç httpx (getUpdates –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥)
logging.getLogger("httpx").setLevel(logging.WARNING)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)

# --- –Ø–∑—ã–∫–∏: –∫–æ–¥ -> (–ù–∞–∑–≤–∞–Ω–∏–µ, –§–ª–∞–≥) ---
_LANG_MAP = {
    "ru": ("–†—É—Å—Å–∫–∏–π", "üá∑üá∫"),
    "en": ("English", "üá¨üáß"),   # –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –Ω–∞ üá∫üá∏, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å
    "uk": ("–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá∫üá¶"),
    "de": ("Deutsch", "üá©üá™"),
    "fr": ("Fran√ßais", "üá´üá∑"),
    "es": ("Espa√±ol", "üá™üá∏"),
    "it": ("Italiano", "üáÆüáπ"),
    "pt": ("Portugu√™s", "üáµüáπ"),
    "pl": ("Polski", "üáµüá±"),
    "tr": ("T√ºrk√ße", "üáπüá∑"),
    "kk": ("“ö–∞–∑–∞“õ—à–∞", "üá∞üáø"),
    "uz": ("O ªzbekcha", "üá∫üáø"),
    "az": ("Az…ôrbaycanca", "üá¶üáø"),
    "he": ("◊¢◊ë◊®◊ô◊™", "üáÆüá±"),
    "ar": ("ÿßŸÑÿπÿ±ÿ®Ÿäÿ©", "üá∏üá¶"),
    "fa": ("ŸÅÿßÿ±ÿ≥€å", "üáÆüá∑"),
    "hi": ("‡§π‡§ø‡§®‡•ç‡§¶‡•Ä", "üáÆüá≥"),
    "bn": ("‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ", "üáßüá©"),
    "zh": ("‰∏≠Êñá", "üá®üá≥"),
    "ja": ("Êó•Êú¨Ë™û", "üáØüáµ"),
    "ko": ("ÌïúÍµ≠Ïñ¥", "üá∞üá∑"),
    # –¥–æ–±–∞–≤–ª—è–π –ø–æ –º–µ—Ä–µ –Ω–∞–¥–æ–±–Ω–æ—Å—Ç–∏
}

def _lang_pretty(code: str | None) -> str:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—É—é —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ 'English üá¨üáß (en)'."""
    if not code:
        return "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω üåê"
    c = code.lower().strip()
    name, flag = _LANG_MAP.get(c, (c, "üåê"))
    return f"{name} {flag} ({c})"

# –ü–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞, –µ—Å–ª–∏ –∏–Ω—Å—Ç–∞–Ω—Å –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (ImportError)
try:
    from app.limit_manager import limit_manager
except ImportError:
    from app.limit_manager import LimitManager
    limit_manager = LimitManager()

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ –º–µ–Ω—é ----------

def _main_menu_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("‚è± –°—Ç–∞—Ç—É—Å"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
            [KeyboardButton("üíé PRO"), KeyboardButton("üîó –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É")],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
    )
    
def _translation_keyboard() -> InlineKeyboardMarkup:
    options = [
        ("ru", "–ù–∞ —Ä—É—Å—Å–∫–∏–π üá∑üá∫"),
        ("en", "–ù–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π üá¨üáß"),
        ("es", "–ù–∞ –∏—Å–ø–∞–Ω—Å–∫–∏–π üá™üá∏"),
        ("de", "–ù–∞ –Ω–µ–º–µ—Ü–∫–∏–π üá©üá™"),
    ]
    rows = []
    for i in range(0, len(options), 2):
        row = []
        for code, label in options[i:i+2]:
            row.append(InlineKeyboardButton(f"‚û°Ô∏è {label}", callback_data=f"trans:{code}"))
        rows.append(row)
    return InlineKeyboardMarkup(rows)

def _priority_badge(is_pro: bool) -> str:
    return "‚ö° –í—ã—Å–æ–∫–∏–π (PRO)" if is_pro else "–û–±—ã—á–Ω—ã–π"



# ---------- –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–µ–¥—á–µ–∫ —Ä–∞–∑–º–µ—Ä–∞ TG-—Ñ–∞–π–ª–æ–≤ ----------

def _get_tg_file_size_mb(update: Update, file_type: str) -> float | None:
    msg = update.message
    try:
        if file_type == "voice" and msg.voice:
            return (msg.voice.file_size or 0) / (1024 * 1024)
        if file_type == "audio" and msg.audio:
            return (msg.audio.file_size or 0) / (1024 * 1024)
        if file_type == "video" and msg.video:
            return (msg.video.file_size or 0) / (1024 * 1024)
        if file_type == "video_note" and msg.video_note:
            return (msg.video_note.file_size or 0) / (1024 * 1024)
        if file_type == "document" and msg.document:
            return (msg.document.file_size or 0) / (1024 * 1024)
    except Exception:
        pass
    return None

async def _reject_if_too_big(update: Update, file_type: str) -> bool:
    """
    –ï—Å–ª–∏ TG-—Ñ–∞–π–ª –±–æ–ª—å—à–µ MAX_FILE_SIZE_MB ‚Äî —Å—Ä–∞–∑—É –ø—Ä–æ—Å–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å —Å—Å—ã–ª–∫—É (–¥–æ URL_MAX_FILE_SIZE_MB).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É.
    """
    size_mb = _get_tg_file_size_mb(update, file_type)
    if size_mb is None:
        return False
    if size_mb > float(MAX_FILE_SIZE_MB):
        await update.message.reply_text(
            f"‚ùå –§–∞–π–ª –±–æ–ª—å—à–µ {MAX_FILE_SIZE_MB} –ú–ë –∏ —á–µ—Ä–µ–∑ Telegram –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.\n\n"
            f"üëâ –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É (YouTube / –Ø.–î–∏—Å–∫ / Google Drive) ‚Äî –ø–æ —Å—Å—ã–ª–∫–µ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–∞–π–ª—ã –¥–æ {URL_MAX_FILE_SIZE_MB} –ú–ë.",
            reply_markup=_main_menu_keyboard()
        )
        return True
    return False

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    is_pro = storage.is_pro(user_id)

    # –ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ª–∏–º–∏—Ç–æ–≤ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    base_text = limit_manager.get_usage_info(user_id)

    # –°—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏
    q = task_queue.get_queue_stats()
    queue_line = (
        f"–¢–µ–∫—É—â–∞—è –æ—á–µ—Ä–µ–¥—å: {q['queue_size']} | "
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {q['active_tasks']}/{q['max_concurrent']}"
    )

    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
    prio_line = f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è: {_priority_badge(is_pro)}"

    text = f"{base_text}\n\n{prio_line}\n{queue_line}"

    # –ö–Ω–æ–ø–∫–∏:
    #  - –¥–ª—è –≤—Å–µ—Ö: –¥–æ–∫—É–ø–∏—Ç—å –º–∏–Ω—É—Ç—ã (–∫–∞–∫ –±—ã–ª–æ)
    #  - –¥–ª—è –ù–ï PRO (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä): –∫–Ω–æ–ø–∫–∞ ¬´‚ö° –£—Å–∫–æ—Ä–∏—Ç—å —Å PRO¬ª
    rows = []

    # PRO –∞–ø–≥—Ä–µ–π–¥ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä)
    if not is_pro and payment_manager:
        try:
            payment_url = payment_manager.get_payment_url(user_id)
            rows.append([InlineKeyboardButton("‚ö° –£—Å–∫–æ—Ä–∏—Ç—å —Å PRO", url=payment_url)])
        except Exception:
            # –º–æ–ª—á–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤
            pass

    # –î–æ–∫—É–ø–∏—Ç—å –º–∏–Ω—É—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    options = [10, 30, 60]
    for m in options:
        amount = m * float(OVERAGE_PRICE_RUB)
        rows.append([
            InlineKeyboardButton(
                f"–î–æ–∫—É–ø–∏—Ç—å {m} –º–∏–Ω ‚Äî {amount:.0f} ‚ÇΩ",
                callback_data=f"buy:{m}:{int(amount)}"
            )
        ])

    kb = InlineKeyboardMarkup(rows) if rows else None

    await update.message.reply_text(
        text + ("\n\n–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç —Å–µ–≥–æ–¥–Ω—è? –î–æ–∫—É–ø–∏—Ç–µ –ø–∞–∫–µ—Ç:" if rows else ""),
        reply_markup=kb
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI-Vera:*\n\n"
        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ/–∞—É–¥–∏–æ/–≤–∏–¥–µ–æ (–¥–æ {MAX_FILE_SIZE_MB} –ú–ë) ‚Äî MP3, WAV, OGG, M4A, MP4, AVI –∏ –¥—Ä.\n"
        f"‚Ä¢ –ò–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É: YouTube / –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫ / Google Drive (–¥–æ {URL_MAX_FILE_SIZE_MB} –ú–ë)\n\n"
        "*–ü–æ–¥—Å–∫–∞–∑–∫–∞:* –¥–ª–∏–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –±–æ—Ç —Å–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç —Ñ–∞–π–ª–æ–º .txt.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –∏ –¥–æ–∫—É–ø–∫–∏ –º–∏–Ω—É—Ç.",
        parse_mode="Markdown",
        reply_markup=_main_menu_keyboard(),
    )

async def premium_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if storage.is_pro(user_id):
        await update.message.reply_text(
            "üéâ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å PRO:\n‚Ä¢ –ë–æ–ª—å—à–µ –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å\n‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n‚Ä¢ –í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã",
            reply_markup=_main_menu_keyboard(),
        )
        return
    if not payment_manager:
        await update.message.reply_text("‚ùå –ü–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", reply_markup=_main_menu_keyboard())
        return
    payment_url = payment_manager.get_payment_url(user_id)
    await update.message.reply_text(
            "üíé *–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ PRO –≤–µ—Ä—Å–∏—é!*\n\n"
            "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
            "‚Ä¢ üïê –±–æ–ª—å—à–µ –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å\n"
            "‚Ä¢ ‚ö° –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
            "‚Ä¢ üìÅ –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã\n\n"
            f"[–û–ø–ª–∞—Ç–∏—Ç—å PRO]({payment_url})",
            parse_mode="Markdown",
            disable_web_page_preview=True,
            reply_markup=_main_menu_keyboard(),
    )

async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    stats = task_queue.get_queue_stats()
    pro_users_count = storage.count_pro()
    await update.message.reply_text(
        "üëë *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n"
        f"PRO –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {pro_users_count}\n"
        f"–ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: {stats['queue_size']}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {stats['active_tasks']}\n",
        parse_mode="Markdown",
    )

async def add_pro_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addpro <user_id>")
        return
    try:
        target = int(context.args[0])
        storage.add_pro(target)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –¥–æ–±–∞–≤–ª–µ–Ω –≤ PRO")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")

async def remove_pro_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removepro <user_id>")
        return
    try:
        target = int(context.args[0])
        storage.remove_pro(target)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —É–¥–∞–ª—ë–Ω –∏–∑ PRO")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")

async def queue_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    stats = task_queue.get_queue_stats()
    await update.message.reply_text(
        "üìä –û—á–µ—Ä–µ–¥—å:\n"
        f"‚Ä¢ –í –æ—á–µ—Ä–µ–¥–∏: {stats['queue_size']}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_tasks']}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_tasks']}\n"
        f"‚Ä¢ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ: {stats['max_concurrent']}\n"
    )

async def backend_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    await update.message.reply_text(
        "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è:\n"
        f"‚Ä¢ –ë—ç–∫–µ–Ω–¥: {WHISPER_BACKEND}\n"
        f"‚Ä¢ –ú–æ–¥–µ–ª—å: {WHISPER_MODEL}"
    )

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å ----------

async def process_via_queue(update: Update, context: ContextTypes.DEFAULT_TYPE, file_type: str, url: str | None = None):
    queue_msg = await update.message.reply_text("üìã –ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å...")
    try:
        user_id = update.effective_user.id
        priority = 0 if storage.is_pro(user_id) else 1
        task_id = await task_queue.add_task(
            task_manager.process_transcription_task,
            update, context, file_type, url,
            priority=priority
        )

        while True:
            await asyncio.sleep(2)
            status = task_queue.get_task_status(task_id)
            s = status.get("status")
            if s == "completed":
                result = status.get("result", {})
                if result.get("success"):
                    # –ö—ç—à –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: –¥–ª—è –∫–Ω–æ–ø–æ–∫ —ç–∫—Å–ø–æ—Ä—Ç–∞
                    context.user_data["last_transcription"] = {
                        "text": result.get("text", ""),
                        "segments": result.get("segments") or [],
                        "title": result.get("title") or "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è",
                        "pdf_path": result.get("pdf_path"),
                        "detected_language": result.get("detected_language"),
                    }


                    head_lines = []
                    if result.get("title"):
                        head_lines.append(f"‚úÖ *{result['title']}*")

                    dur = result.get("duration") or 0
                    head_lines.append(f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_seconds(int(dur))}")
                    
                    # –ë–µ–π–¥–∂ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
                    is_pro_now = storage.is_pro(update.effective_user.id)
                    head_lines.append(f"–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {_priority_badge(is_pro_now)}")

                    if result.get("detected_language"):
                        head_lines.append(f"–Ø–∑—ã–∫: {_lang_pretty(result['detected_language'])}")

                    # –ö–æ–ª-–≤–æ —Å–ª–æ–≤
                    if isinstance(result.get("word_count"), int) and result["word_count"] > 0:
                        head_lines.append(f"–°–ª–æ–≤: {result['word_count']}")

                    # –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                    if result.get("processing_time_s") is not None:
                        # –æ–∫—Ä—É–≥–ª–∏–º/–ø—Ä–∏–≤–µ–¥—ë–º –∫ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É
                        secs = result["processing_time_s"]
                        head_lines.append(f"–û–±—Ä–∞–±–æ—Ç–∫–∞: {secs:.1f} c")

                    head = "\n".join(head_lines) + "\n\n"

                    text = result.get("text", "") or ""
                    MESSAGE_LIMIT = 3900  # –∑–∞–ø–∞—Å –∫ 4096
                    if len(text) > MESSAGE_LIMIT:
                        # 1) –∫–æ—Ä–æ—Ç–∫–∏–π –∞–Ω–æ–Ω—Å
                        if head:
                            await update.message.reply_text(head, parse_mode="Markdown")
                        await update.message.reply_text("üìù –¢–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª–æ–º .txt")

                        # 2) –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç .txt
                        downloads = _ensure_downloads_dir()
                        filename_base = f"transcription_{uuid.uuid4().hex[:8]}"
                        txt_path = os.path.join(downloads, f"{filename_base}.txt")
                        with open(txt_path, "w", encoding="utf-8") as f:
                            f.write(text)
                        with open(txt_path, "rb") as f:
                            await update.message.reply_document(
                                InputFile(f, filename=os.path.basename(txt_path)),
                                caption="üìù –ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç",
                            )
                        os.remove(txt_path)

                        # 3) –µ—Å–ª–∏ –µ—Å—Ç—å –∞–≤—Ç–æ-PDF ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º
                        if result.get("pdf_path"):
                            try:
                                with open(result["pdf_path"], "rb") as f:
                                    await update.message.reply_document(
                                        InputFile(f, filename="transcription.pdf"),
                                        caption="üìÑ PDF –≤–µ—Ä—Å–∏—è",
                                    )
                            except Exception as e:
                                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF: {e}")
                    else:
                        # –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä—è–º–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                        await update.message.reply_text(head + f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{text}", parse_mode="Markdown")

                    # –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
                    keyboard = InlineKeyboardMarkup(
                        [
                            [
                                InlineKeyboardButton("üìÑ PDF", callback_data="export:pdf"),
                                InlineKeyboardButton("üìù TXT", callback_data="export:txt"),
                            ],
                            [InlineKeyboardButton("‚è±Ô∏è SRT", callback_data="export:srt")],
                        ]
                    )
                    await update.message.reply_text("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ñ–∞–π–ª:", reply_markup=keyboard)
                    await update.message.reply_text("–ù—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞?", reply_markup=_translation_keyboard())
                    await update.message.reply_text(
                        "üìä –•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É —Ç–µ–∫—Å—Ç–∞?",
                        reply_markup=InlineKeyboardMarkup(
                            [[InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫—É", callback_data="analytics")]]
                        )
                    )


                    await queue_msg.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ!")
                else:
                    err = result.get("error")
                    if err == "limit_exceeded":
                        # –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–æ–∫—É–ø–∫–∏ –º–∏–Ω—É—Ç
                        options = [10, 30, 60]
                        rows = []
                        for m in options:
                            amount = m * float(OVERAGE_PRICE_RUB)
                            rows.append([
                                InlineKeyboardButton(
                                    f"–î–æ–∫—É–ø–∏—Ç—å {m} –º–∏–Ω ‚Äî {amount:.0f} ‚ÇΩ",
                                    callback_data=f"buy:{m}:{int(amount)}"
                                )
                            ])
                        kb = InlineKeyboardMarkup(rows)
                        await queue_msg.edit_text(result.get("message", "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç."))
                        await update.message.reply_text("–ú–æ–∂–Ω–æ –¥–æ–∫—É–ø–∏—Ç—å –º–∏–Ω—É—Ç—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:", reply_markup=kb)
                    elif err == "download_failed":
                        await queue_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª/—Å—Å—ã–ª–∫—É.")
                    else:
                        await queue_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
                break

            elif s == "failed":
                await queue_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
                break

            elif s == "processing":
                stats = task_queue.get_queue_stats()
                pos = stats["queue_size"] + stats["active_tasks"]
                await queue_msg.edit_text(
                    f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é... –ü–æ–∑–∏—Ü–∏—è: {pos}\n"
                    f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {stats['active_tasks']}/{stats['max_concurrent']}"
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–µ—Ä–µ–¥–∏: {e}")
        await queue_msg.edit_text("‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞.")

# ---------- –≠–∫—Å–ø–æ—Ä—Ç –ø–æ –∫–Ω–æ–ø–∫–∞–º ----------

def _ensure_downloads_dir() -> str:
    d = "downloads"
    os.makedirs(d, exist_ok=True)
    return d

def _srt_time(t: float) -> str:
    ms = int(round((t - int(t)) * 1000))
    s = int(t) % 60
    m = (int(t) // 60) % 60
    h = int(t) // 3600
    return f"{h:02}:{m:02}:{s:02},{ms:03}"

def _make_srt_content(segments: list[dict]) -> str:
    lines = []
    for idx, seg in enumerate(segments, 1):
        start = float(seg.get("start", 0.0))
        end = float(seg.get("end", 0.0))
        text = (seg.get("text") or "").strip()
        lines.append(str(idx))
        lines.append(f"{_srt_time(start)} --> {_srt_time(end)}")
        lines.append(text)
        lines.append("")
    return "\n".join(lines).strip() + "\n"

async def export_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    kind = (query.data or "").split(":", 1)[-1]
    data = context.user_data.get("last_transcription")
    if not data:
        await query.edit_message_text("–ù–µ—Ç –Ω–µ–¥–∞–≤–Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    title = data.get("title") or "transcription"
    safe_title = "".join(c for c in title if c.isalnum() or c in " _-").strip() or "transcription"
    downloads = _ensure_downloads_dir()
    filename_base = f"{safe_title}_{uuid.uuid4().hex[:8]}"

    try:
        if kind == "pdf":
            pdf_path = data.get("pdf_path")
            if not pdf_path:
                pdf_path = os.path.join(downloads, f"{filename_base}.pdf")
                pdf_generator.generate_transcription_pdf(data["text"], pdf_path, title=title)
            with open(pdf_path, "rb") as f:
                await query.message.reply_document(
                    InputFile(f, filename=os.path.basename(pdf_path)),
                    caption="üìÑ PDF —Ñ–∞–π–ª",
                )
            if not data.get("pdf_path") and os.path.exists(pdf_path):
                os.remove(pdf_path)

        elif kind == "txt":
            txt_path = os.path.join(downloads, f"{filename_base}.txt")
            with open(txt_path, "w", encoding="utf-8") as f:
                f.write(data["text"])
            with open(txt_path, "rb") as f:
                await query.message.reply_document(
                    InputFile(f, filename=os.path.basename(txt_path)),
                    caption="üìù TXT —Ñ–∞–π–ª",
                )
            os.remove(txt_path)

        elif kind == "srt":
            segments = data.get("segments") or []
            if not segments:
                await query.edit_message_text("‚è±Ô∏è –ù–µ—Ç —Å–µ–≥–º–µ–Ω—Ç–æ–≤ –¥–ª—è SRT.")
                return
            srt_path = os.path.join(downloads, f"{filename_base}.srt")
            with open(srt_path, "w", encoding="utf-8") as f:
                f.write(_make_srt_content(segments))
            with open(srt_path, "rb") as f:
                await query.message.reply_document(
                    InputFile(f, filename=os.path.basename(srt_path)),
                    caption="‚è±Ô∏è SRT —Ñ–∞–π–ª",
                )
            os.remove(srt_path)

        else:
            await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞.")
    except Exception:
        logger.exception("Export error")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ —Ñ–∞–π–ª–∞.")


async def export_translation_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    kind = (query.data or "").split(":", 1)[-1]

    data = context.user_data.get("last_translation")
    if not data or not data.get("text"):
        await query.edit_message_text("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    title = f"{data.get('title') or '–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è'} ‚Äî –ø–µ—Ä–µ–≤–æ–¥ ({data.get('lang','?')})"
    safe_title = "".join(c for c in title if c.isalnum() or c in " _-").strip() or "translation"
    downloads = _ensure_downloads_dir()
    filename_base = f"{safe_title}_{uuid.uuid4().hex[:8]}"

    try:
        if kind == "pdf":
            pdf_path = os.path.join(downloads, f"{filename_base}.pdf")
            pdf_generator.generate_transcription_pdf(data["text"], pdf_path, title=title)
            with open(pdf_path, "rb") as f:
                await query.message.reply_document(InputFile(f, filename=os.path.basename(pdf_path)),
                                                   caption="üìÑ PDF –ø–µ—Ä–µ–≤–æ–¥")
            os.remove(pdf_path)

        elif kind == "txt":
            txt_path = os.path.join(downloads, f"{filename_base}.txt")
            with open(txt_path, "w", encoding="utf-8") as f:
                f.write(data["text"])
            with open(txt_path, "rb") as f:
                await query.message.reply_document(InputFile(f, filename=os.path.basename(txt_path)),
                                                   caption="üìù TXT –ø–µ—Ä–µ–≤–æ–¥")
            os.remove(txt_path)
        else:
            await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞.")
    except Exception:
        logger.exception("Export translation error")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞.")


    async def translate_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = context.user_data.get("last_transcription")
    if not data or not data.get("text"):
        await query.edit_message_text("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.")
        return

    # —Ñ–æ—Ä–º–∞—Ç: trans:<lang>
    try:
        target_lang = (query.data or "").split(":", 1)[1].strip().lower()
    except Exception:
        await query.edit_message_text("–ù–µ —É–∫–∞–∑–∞–Ω —è–∑—ã–∫ –ø–µ—Ä–µ–≤–æ–¥–∞.")
        return

    text = data["text"]
    title = data.get("title") or "–¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏—è"

    try:
        await query.edit_message_text("üåê –í—ã–ø–æ–ª–Ω—è—é –ø–µ—Ä–µ–≤–æ–¥, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        translated = await asyncio.to_thread(translate_text, text, target_lang, "auto")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–∫—Å–ø–æ—Ä—Ç–∞
        context.user_data["last_translation"] = {
            "text": translated,
            "lang": target_lang,
            "title": title,
        }

        MESSAGE_LIMIT = 3900
        lang_str = _lang_pretty(target_lang)
        head = f"üåê *–ü–µ—Ä–µ–≤–æ–¥* ‚Üí {lang_str}\n–ò–∑: *{title}*\n\n"

        if len(translated) <= MESSAGE_LIMIT:
            await query.message.reply_text(head + translated, parse_mode="Markdown")
        else:
            downloads = _ensure_downloads_dir()
            safe_title = "".join(c for c in title if c.isalnum() or c in " _-").strip() or "transcription"
            filename = f"translation_{safe_title}_{target_lang}_{uuid.uuid4().hex[:6]}.txt"
            path = os.path.join(downloads, filename)
            with open(path, "w", encoding="utf-8") as f:
                f.write(translated)
            with open(path, "rb") as f:
                await query.message.reply_document(
                    InputFile(f, filename=filename),
                    caption=f"üåê –ü–µ—Ä–µ–≤–æ–¥ ‚Üí {lang_str}"
                )
            os.remove(path)

        # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        kb = InlineKeyboardMarkup(
            [[
                InlineKeyboardButton("üìÑ PDF –ø–µ—Ä–µ–≤–æ–¥–∞", callback_data="t_export:pdf"),
                InlineKeyboardButton("üìù TXT –ø–µ—Ä–µ–≤–æ–¥–∞", callback_data="t_export:txt"),
            ]]
        )
        await query.message.reply_text("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥:", reply_markup=kb)

    except Exception:
        logger.exception("Translate callback error")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def analytics_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = context.user_data.get("last_transcription")
    if not data or not data.get("text"):
        await query.edit_message_text("–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.")
        return

    text = data["text"]
    # –±–µ—Ä—ë–º —è–∑—ã–∫, –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤ last_transcription, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞
    lang_code = data.get("detected_language")
    if not lang_code:
        try:
            lang_code = "ru" if any("–∞" <= ch <= "—è" or "–ê" <= ch <= "–Ø" for ch in text) else "en"
        except Exception:
            lang_code = "en"

    metrics = analyze_text(text, lang_code)
    report = build_report_md(metrics)
    await query.message.reply_text(report, parse_mode="Markdown")


# ---------- –ü–æ–∫—É–ø–∫–∞ –¥–æ–∫—É–ø–∫–∏ –º–∏–Ω—É—Ç ----------

async def buy_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    # —Ñ–æ—Ä–º–∞—Ç: buy:<minutes>:<amount_int>
    parts = (query.data or "").split(":")
    try:
        minutes = int(parts[1])
        amount_int = int(parts[2])
    except Exception:
        await query.edit_message_text("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–æ–∫—É–ø–∫–∏.")
        return

    user_id = query.from_user.id
    amount = float(amount_int)

    if not payment_manager:
        await query.edit_message_text("‚ùå –ü–ª–∞—Ç–µ–∂–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return

    try:
        if hasattr(payment_manager, "get_topup_url"):
            topup_url = payment_manager.get_topup_url(user_id=user_id, minutes=minutes, amount=amount)
            await query.edit_message_text(
                f"–î–ª—è –¥–æ–∫—É–ø–∫–∏ {minutes} –º–∏–Ω –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n{topup_url}"
            )
        else:
            await query.edit_message_text("‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä –æ–ø–ª–∞—Ç—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ–∫—É–ø–∫—É –º–∏–Ω—É—Ç.")
    except Exception:
        logger.exception("buy_callback error")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –æ–ø–ª–∞—Ç—ã.")

# ---------- –•—ç–Ω–¥–ª–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π (—Å –ø—Ä–µ–¥—á–µ–∫–æ–º —Ä–∞–∑–º–µ—Ä–∞) ----------

async def handle_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await _reject_if_too_big(update, "voice"):
        return
    await process_via_queue(update, context, "voice")

async def handle_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await _reject_if_too_big(update, "audio"):
        return
    await process_via_queue(update, context, "audio")

async def handle_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await _reject_if_too_big(update, "video"):
        return
    await process_via_queue(update, context, "video")

async def handle_video_note(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if await _reject_if_too_big(update, "video_note"):
        return
    await process_via_queue(update, context, "video_note")

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    doc = update.message.document
    name = (doc.file_name or "").lower()
    if any(
        name.endswith(ext)
        for ext in (".mp3", ".wav", ".ogg", ".m4a", ".flac", ".aac", ".mp4", ".avi", ".mov", ".wmv", ".flv", ".mkv")
    ):
        if await _reject_if_too_big(update, "document"):
            return
        await process_via_queue(update, context, "document")
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª.", reply_markup=_main_menu_keyboard())

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()

    # –ö–Ω–æ–ø–∫–∏ –∏–∑ –º–µ–Ω—é
    if text == "‚è± –°—Ç–∞—Ç—É—Å":
        return await stats_command(update, context)
    if text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        return await help_command(update, context)
    if text == "üíé PRO":
        return await premium_command(update, context)
    if text == "üîó –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É":
        return await update.message.reply_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube/–Ø.–î–∏—Å–∫/Google Drive –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.")

    # –°—Å—ã–ª–∫–∞
    if text.startswith(("http://", "https://", "www.")):
        return await process_via_queue(update, context, "url", text)

    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É (YouTube/–Ø.–î–∏—Å–∫/GDrive) –∏–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª.",
        reply_markup=_main_menu_keyboard()
    )

    
# ---------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ —Å ¬´–º—è–≥–∫–æ–π –∑–∞—â–∏—Ç–æ–π¬ª ----------

def main():
    # –ú–∏–≥—Ä–∞—Ü–∏—è PRO –∏–∑ ENV ‚Üí Redis/Postgres
    run_startup_migrations()

    async def _post_init(_):
        await task_queue.start()

    async def _post_shutdown(_):
        await task_queue.stop()

    app = (
        Application.builder()
        .token(TELEGRAM_BOT_TOKEN)
        .post_init(_post_init)
        .post_shutdown(_post_shutdown)
        .build()
    )

    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("stats", stats_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("queue", queue_stats_command))
    app.add_handler(CommandHandler("premium", premium_command))
    app.add_handler(CommandHandler("admin", admin_command))
    app.add_handler(CommandHandler("addpro", add_pro_command))
    app.add_handler(CommandHandler("removepro", remove_pro_command))
    app.add_handler(CommandHandler("backend", backend_command))

    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    app.add_handler(MessageHandler(filters.AUDIO, handle_audio))
    app.add_handler(MessageHandler(filters.VIDEO, handle_video))
    app.add_handler(MessageHandler(filters.VIDEO_NOTE, handle_video_note))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    app.add_handler(CallbackQueryHandler(export_callback, pattern=r"^export:"))
    app.add_handler(CallbackQueryHandler(buy_callback, pattern=r"^buy:"))
    app.add_handler(CallbackQueryHandler(translate_callback, pattern=r"^trans:"))
    app.add_handler(CallbackQueryHandler(export_translation_callback, pattern=r"^t_export:"))
    app.add_handler(CallbackQueryHandler(analytics_callback, pattern=r"^analytics$"))



    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ AI-Vera (polling)...")

    try:
        # —Ä–µ–∂–µ –æ–ø—Ä–∞—à–∏–≤–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –∞–ø–¥–µ–π—Ç—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ
        app.run_polling(
            allowed_updates=Update.ALL_TYPES,
            poll_interval=3.0,
            drop_pending_updates=True,
        )
    except Conflict:
        # –ú—è–≥–∫–∞—è –∑–∞—â–∏—Ç–∞: –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ—Å—Å —É–∂–µ –¥–µ–ª–∞–µ—Ç getUpdates —ç—Ç–∏–º —Ç–æ–∫–µ–Ω–æ–º
        logger.error(
            "‚ùå Conflict: –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ —É–∂–µ –¥–µ–ª–∞–µ—Ç getUpdates —ç—Ç–∏–º —Ç–æ–∫–µ–Ω–æ–º. "
            "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—É–±–ª–∏–∫–∞—Ç (–ª–æ–∫–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç, –≤—Ç–æ—Ä–æ–π –∏–Ω—Å—Ç–∞–Ω—Å –Ω–∞ —Ö–æ—Å—Ç–∏–Ω–≥–µ, –≤–∫–ª—é—á—ë–Ω–Ω—ã–π –≤–µ–±—Ö—É–∫)."
        )
        try:
            asyncio.run(task_queue.stop())
        except Exception:
            pass
        sys.exit(0)
    except Exception:
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
        try:
            asyncio.run(task_queue.stop())
        except Exception:
            pass
        sys.exit(1)

if __name__ == "__main__":
    main()
