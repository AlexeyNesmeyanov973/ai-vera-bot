import logging
import asyncio
from telegram import Update, InputFile
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextType
from app.config import TELEGRAM_BOT_TOKEN, ADMIN_USER_IDS, payment_manager, PRO_USER_IDS
from app.limit_manager import limit_manager
from app.task_queue import task_queue
from app.task_manager import task_manager
from app.utils import format_seconds

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ---------- –ö–æ–º–∞–Ω–¥—ã ----------

async def start_command(update: Update, context: ContextType.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
        "–Ø ‚Äî AI-Vera, –±–æ—Ç –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∞—É–¥–∏–æ –∏ –≤–∏–¥–µ–æ –≤ —Ç–µ–∫—Å—Ç.\n"
        "–û—Ç–ø—Ä–∞–≤—å –≥–æ–ª–æ—Å–æ–≤–æ–µ, –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ (–¥–æ 20 –ú–ë) ‚Äî —è –≤—Å—ë —Ä–∞—Å–ø–æ–∑–Ω–∞—é.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/stats ‚Äî —Ç–≤–æ–∏ –ª–∏–º–∏—Ç—ã\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/queue ‚Äî —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏ (–∞–¥–º–∏–Ω)\n"
        "/premium ‚Äî PRO-—Å—Ç–∞—Ç—É—Å\n"
        "/admin ‚Äî –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
    )

async def stats_command(update: Update, context: ContextType.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await update.message.reply_text(limit_manager.get_usage_info(user_id))

async def help_command(update: Update, context: ContextType.DEFAULT_TYPE):
    await update.message.reply_text(
        "ü§ñ *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å AI-Vera:*\n\n"
        "1) –ì–æ–ª–æ—Å–æ–≤—ã–µ ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ –≥–æ–ª–æ—Å.\n"
        "2) –ê—É–¥–∏–æ/–≤–∏–¥–µ–æ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª (MP3, WAV, MP4, AVI –∏ –¥—Ä.).\n"
        "3) –°—Å—ã–ª–∫–∏ (YouTube, –Ø.–î–∏—Å–∫, GDrive) ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ URL —Ç–µ–∫—Å—Ç–æ–º.\n\n"
        "*–í–∞–∂–Ω–æ:* —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ ‚â§ 20 –ú–ë.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤.",
        parse_mode='Markdown'
    )

async def premium_command(update: Update, context: ContextType.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id in PRO_USER_IDS:
        await update.message.reply_text(
            "üéâ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å PRO:\n‚Ä¢ 120 –º–∏–Ω/–¥–µ–Ω—å\n‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞\n‚Ä¢ –í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã"
        )
        return
    if not payment_manager:
        await update.message.reply_text("‚ùå –ü–ª–∞—Ç–µ–∂–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")
        return
    payment_url = payment_manager.get_payment_url(user_id)
    await update.message.reply_text(
        "üíé *–ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ PRO –≤–µ—Ä—Å–∏—é!*\n\n"
        "–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
        "‚Ä¢ üïê 120 –º–∏–Ω—É—Ç/–¥–µ–Ω—å\n"
        "‚Ä¢ ‚ö° –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç\n"
        "‚Ä¢ üìÅ –í—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã\n\n"
        f"[–û–ø–ª–∞—Ç–∏—Ç—å PRO]({payment_url})",
        parse_mode='Markdown',
        disable_web_page_preview=True
    )

async def admin_command(update: Update, context: ContextType.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    stats = task_queue.get_queue_stats()
    await update.message.reply_text(
        "üëë *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n"
        f"PRO –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(PRO_USER_IDS)}\n"
        f"–ó–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏: {stats['queue_size']}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {stats['active_tasks']}\n",
        parse_mode='Markdown'
    )

async def add_pro_command(update: Update, context: ContextType.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addpro <user_id>")
        return
    try:
        target = int(context.args[0])
        if target not in PRO_USER_IDS:
            PRO_USER_IDS.append(target)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –¥–æ–±–∞–≤–ª–µ–Ω –≤ PRO")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")

async def remove_pro_command(update: Update, context: ContextType.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removepro <user_id>")
        return
    try:
        target = int(context.args[0])
        if target in PRO_USER_IDS:
            PRO_USER_IDS.remove(target)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} —É–¥–∞–ª—ë–Ω –∏–∑ PRO")
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id")

async def queue_stats_command(update: Update, context: ContextType.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in ADMIN_USER_IDS:
        await update.message.reply_text("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return
    stats = task_queue.get_queue_stats()
    await update.message.reply_text(
        "üìä –û—á–µ—Ä–µ–¥—å:\n"
        f"‚Ä¢ –í –æ—á–µ—Ä–µ–¥–∏: {stats['queue_size']}\n"
        f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_tasks']}\n"
        f"‚Ä¢ –í—Å–µ–≥–æ: {stats['total_tasks']}\n"
        f"‚Ä¢ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ: {stats['max_concurrent']}\n"
    )

# ---------- –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –æ—á–µ—Ä–µ–¥—å ----------

async def process_via_queue(update: Update, context: ContextType.DEFAULT_TYPE, file_type: str, url: str | None = None):
    queue_msg = await update.message.reply_text("üìã –ó–∞–¥–∞—á–∞ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å...")
    try:
        task_id = await task_queue.add_task(task_manager.process_transcription_task, update, context, file_type, url)
        while True:
            await asyncio.sleep(2)
            status = task_queue.get_task_status(task_id)
            s = status.get('status')
            if s == 'completed':
                result = status.get('result', {})
                if result.get('success'):
                    head = ""
                    if result.get('title'):
                        head = f"‚úÖ *{result['title']}*\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {format_seconds(result['duration'])}\n\n"
                    text = result.get('text', '')
                    if len(text) > 4000:
                        if head:
                            await update.message.reply_text(head, parse_mode='Markdown')
                        for i in range(0, len(text), 4000):
                            await update.message.reply_text(text[i:i+4000])
                    else:
                        await update.message.reply_text(head + f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç:\n\n{text}", parse_mode='Markdown')

                    if result.get('pdf_path'):
                        try:
                            with open(result['pdf_path'], 'rb') as f:
                                await update.message.reply_document(InputFile(f, filename="transcription.pdf"),
                                                                   caption="üìÑ PDF –≤–µ—Ä—Å–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
                        except Exception as e:
                            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF: {e}")

                    await queue_msg.edit_text("‚úÖ –ì–æ—Ç–æ–≤–æ!")
                else:
                    err = result.get('error')
                    if err == 'limit_exceeded':
                        await queue_msg.edit_text(result.get('message', '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç'))
                    elif err == 'download_failed':
                        await queue_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª/—Å—Å—ã–ª–∫—É.")
                    else:
                        await queue_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
                break

            elif s == 'failed':
                await queue_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏.")
                break

            elif s == 'processing':
                stats = task_queue.get_queue_stats()
                pos = stats['queue_size'] + stats['active_tasks']
                await queue_msg.edit_text(
                    f"‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é... –ü–æ–∑–∏—Ü–∏—è: {pos}\n"
                    f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {stats['active_tasks']}/{stats['max_concurrent']}"
                )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–µ—Ä–µ–¥–∏: {e}")
        await queue_msg.edit_text("‚ùå –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞.")

# ---------- –•—ç–Ω–¥–ª–µ—Ä—ã ----------

async def handle_voice(update: Update, context: ContextType.DEFAULT_TYPE):
    await process_via_queue(update, context, 'voice')

async def handle_audio(update: Update, context: ContextType.DEFAULT_TYPE):
    await process_via_queue(update, context, 'audio')

async def handle_video(update: Update, context: ContextType.DEFAULT_TYPE):
    await process_via_queue(update, context, 'video')

async def handle_video_note(update: Update, context: ContextType.DEFAULT_TYPE):
    await process_via_queue(update, context, 'video_note')

async def handle_document(update: Update, context: ContextType.DEFAULT_TYPE):
    doc = update.message.document
    name = (doc.file_name or "").lower()
    if any(name.endswith(ext) for ext in ('.mp3', '.wav', '.ogg', '.m4a', '.mp4', '.avi', '.mov')):
        await process_via_queue(update, context, 'document')
    else:
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª.")

async def handle_text(update: Update, context: ContextType.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    if text.startswith(('http://', 'https://', 'www.')):
        await process_via_queue(update, context, 'url', text)
    else:
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É (YouTube/–Ø.–î–∏—Å–∫/GDrive) –∏–ª–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª.")

# ---------- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ----------

def main():
    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("stats", stats_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("queue", queue_stats_command))
    app.add_handler(CommandHandler("premium", premium_command))
    app.add_handler(CommandHandler("admin", admin_command))
    app.add_handler(CommandHandler("addpro", add_pro_command))
    app.add_handler(CommandHandler("removepro", remove_pro_command))

    app.add_handler(MessageHandler(filters.VOICE, handle_voice))
    app.add_handler(MessageHandler(filters.AUDIO, handle_audio))
    app.add_handler(MessageHandler(filters.VIDEO, handle_video))
    app.add_handler(MessageHandler(filters.VIDEO_NOTE, handle_video_note))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    async def _post_init(_):
        await task_queue.start()
    async def _post_stop(_):
        await task_queue.stop()

    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ AI-Vera (polling)...")
    app.run_polling(allowed_updates=Update.ALL_TYPES, post_init=_post_init, post_stop=_post_stop)

if __name__ == "__main__":
    main()
