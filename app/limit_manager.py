# app/limit_manager.py
from datetime import date
from math import ceil
from typing import Tuple

from app.config import FREE_USER_DAILY_LIMIT_MINUTES, PRO_USER_DAILY_LIMIT_MINUTES
from app import storage


class LimitManager:
    """
    –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏ —Å —É—á—ë—Ç–æ–º –¥–æ–∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Å–µ–∫—É–Ω–¥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
    """

    def _get_base_limit_seconds(self, user_id: int) -> int:
        daily = PRO_USER_DAILY_LIMIT_MINUTES if storage.is_pro(user_id) else FREE_USER_DAILY_LIMIT_MINUTES
        return int(daily) * 60

    def _ensure_today(self, user_id: int) -> None:
        used, last_date = storage.get_usage(user_id)
        today = date.today()
        if last_date != today:
            storage.set_usage(user_id, 0, today)
        # overage —Ö—Ä–∞–Ω–∏—Ç—Å—è —Å–æ —Å–≤–æ–µ–π –¥–∞—Ç–æ–π –≤ storage; —Å–±—Ä–æ—Å –¥–µ–ª–∞–µ—Ç—Å—è —Ç–∞–º

    def can_process(self, user_id: int, audio_duration_seconds: int) -> Tuple[bool, str, int, int]:
        """
        Return:
          ok, message, remaining_total_seconds, deficit_seconds
        """
        self._ensure_today(user_id)
        base_limit = self._get_base_limit_seconds(user_id)
        used_s, _ = storage.get_usage(user_id)
        extra_s, last = storage.get_overage(user_id)
        if last != date.today():
            extra_s = 0

        remaining_total = max(0, base_limit - used_s) + max(0, extra_s)
        if audio_duration_seconds > remaining_total:
            deficit = audio_duration_seconds - remaining_total
            msg = (
                f"–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç.\n"
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {used_s // 60} –º–∏–Ω.\n"
                f"–ë–∞–∑–∞: {base_limit // 60} –º–∏–Ω.\n"
                f"–î–æ–∫—É–ø–ª–µ–Ω–æ: {extra_s // 60} –º–∏–Ω.\n"
                f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {max(1, ceil(deficit / 60))} –º–∏–Ω."
            )
            return False, msg, remaining_total, deficit
        return True, "", remaining_total, 0

    def update_usage(self, user_id: int, additional_seconds: int) -> None:
        """
        –°–Ω–∞—á–∞–ª–∞ —Ç—Ä–∞—Ç–∏–º –±–∞–∑–æ–≤—ã–π –ª–∏–º–∏—Ç, –∑–∞—Ç–µ–º —Å–ø–∏—Å—ã–≤–∞–µ–º –∏–∑ –¥–æ–∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Å–µ–∫—É–Ω–¥.
        """
        used_s, last_date = storage.get_usage(user_id)
        base_limit = self._get_base_limit_seconds(user_id)
        extra_s, last_over = storage.get_overage(user_id)
        if last_over != date.today():
            extra_s = 0

        base_remaining = max(0, base_limit - used_s)
        consume_from_base = min(base_remaining, max(0, int(additional_seconds)))
        consume_from_overage = max(0, int(additional_seconds) - consume_from_base)

        storage.set_usage(user_id, used_s + consume_from_base, last_date)
        if consume_from_overage > 0:
            storage.consume_overage_seconds(user_id, consume_from_overage)

    def get_usage_info(self, user_id: int) -> str:
        self._ensure_today(user_id)
        base_limit = self._get_base_limit_seconds(user_id)
        used_s, _ = storage.get_usage(user_id)
        extra_s, last = storage.get_overage(user_id)
        if last != date.today():
            extra_s = 0
        remaining_total = max(0, base_limit - used_s) + max(0, extra_s)
        is_pro = storage.is_pro(user_id)
        return (
            f"–í–∞—à —Å—Ç–∞—Ç—É—Å: {'PRO ü§©' if is_pro else '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π'}\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {used_s // 60} –º–∏–Ω.\n"
            f"–î–æ–∫—É–ø–ª–µ–Ω–æ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {extra_s // 60} –º–∏–Ω.\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è (–≤—Å–µ–≥–æ): {remaining_total // 60} –º–∏–Ω.\n"
            f"–ë–∞–∑–æ–≤—ã–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {base_limit // 60} –º–∏–Ω."
        )


# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç–∞–Ω—Å
limit_manager = LimitManager()
