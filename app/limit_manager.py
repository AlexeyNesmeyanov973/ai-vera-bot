import time
from datetime import datetime, timezone, timedelta
from app.config import FREE_USER_DAILY_LIMIT_MINUTES, PRO_USER_DAILY_LIMIT_MINUTES, PRO_USER_IDS

class LimitManager:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    –í–µ–¥–µ—Ç —É—á–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –º–∏–Ω—É—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å.
    """
    
    def __init__(self):
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö: {user_id: {'used_seconds': 300, 'last_reset_date': '2023-11-30'}}
        self.user_data = {}
        self._reset_old_entries()

    def _get_user_limit_seconds(self, user_id: int) -> int:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö."""
        daily_limit_minutes = PRO_USER_DAILY_LIMIT_MINUTES if user_id in PRO_USER_IDS else FREE_USER_DAILY_LIMIT_MINUTES
        return daily_limit_minutes * 60

    def _get_today_date_str(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ YYYY-MM-DD."""
        return datetime.now(timezone.utc).strftime('%Y-%m-%d')

    def _reset_old_entries(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏, –µ—Å–ª–∏ –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ —Å–µ–≥–æ–¥–Ω—è."""
        today = self._get_today_date_str()
        for user_id, data in list(self.user_data.items()):
            if data.get('last_reset_date') != today:
                self.user_data[user_id] = {'used_seconds': 0, 'last_reset_date': today}

    def _ensure_user_entry(self, user_id: int):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç, –∏–ª–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ –¥–µ–Ω—å —Å–º–µ–Ω–∏–ª—Å—è."""
        today = self._get_today_date_str()
        if user_id not in self.user_data or self.user_data[user_id].get('last_reset_date') != today:
            self.user_data[user_id] = {'used_seconds': 0, 'last_reset_date': today}

    def can_process(self, user_id: int, audio_duration_seconds: int) -> tuple[bool, str, int]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.
            audio_duration_seconds: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
            
        Returns:
            tuple: (–ú–æ–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –û—Å—Ç–∞–≤—à–µ–µ—Å—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—É–Ω–¥)
        """
        self._ensure_user_entry(user_id)
        
        user_limit_seconds = self._get_user_limit_seconds(user_id)
        used_seconds = self.user_data[user_id]['used_seconds']
        remaining_seconds = user_limit_seconds - used_seconds
        
        if audio_duration_seconds > remaining_seconds:
            message = (f"–ü—Ä–µ–≤—ã—à–µ–Ω –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {used_seconds // 60} –º–∏–Ω. "
                      f"–õ–∏–º–∏—Ç: {user_limit_seconds // 60} –º–∏–Ω. "
                      f"–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {(audio_duration_seconds - remaining_seconds) // 60} –º–∏–Ω.")
            return (False, message, remaining_seconds)
        
        return (True, "", remaining_seconds - audio_duration_seconds)

    def update_usage(self, user_id: int, additional_seconds: int):
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.
            additional_seconds: –°–µ–∫—É–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ —Å—á–µ—Ç—á–∏–∫—É.
        """
        self._ensure_user_entry(user_id)
        self.user_data[user_id]['used_seconds'] += additional_seconds

    def get_usage_info(self, user_id: int) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ª–∏–º–∏—Ç–∞.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.
            
        Returns:
            str: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö.
        """
        self._ensure_user_entry(user_id)
        
        user_limit_seconds = self._get_user_limit_seconds(user_id)
        used_seconds = self.user_data[user_id]['used_seconds']
        remaining_seconds = user_limit_seconds - used_seconds
        is_pro = user_id in PRO_USER_IDS
        
        return (f"–í–∞—à —Å—Ç–∞—Ç—É—Å: {'PRO ü§©' if is_pro else '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π'}\n"
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: {used_seconds // 60} –º–∏–Ω.\n"
                f"–û—Å—Ç–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è: {remaining_seconds // 60} –º–∏–Ω.\n"
                f"–û–±—â–∏–π –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç: {user_limit_seconds // 60} –º–∏–Ω.")

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ª–∏–º–∏—Ç–æ–≤
limit_manager = LimitManager()